language: c

# Use the docker infrastructure
sudo: false

# Cache the installed Haskell stuff
cache:
  directories:
    - $HOME/.stack

notifications:
  email:
    on_success: change
    on_failure: change

# The following enables several GHC versions to be tested; often it's enough to
# test only against the last release in a major GHC version. Feel free to omit
# lines listings versions you don't need/want testing for.
env:
  global:
    - PKG_CONFIG_PATH=$HOME/.stack/local/lib/pkgconfig
    - LD_LIBRARY_PATH=$HOME/.stack/local/lib
    - LD_RUN_PATH=$HOME/.stack/local/lib
    - CFLAGS=-I$HOME/.stack/local/include
    - LDFLAGS=-L$HOME/.stack/local/lib
    - STACK=$PWD/stack --no-terminal
    - CABAL=$STACK exec -- cabal
  matrix:
    - STACK_RESOLVER=lts-2
    - STACK_RESOLVER=lts-3
    - STACK_RESOLVER=lts-5

# Download the latest stack command.
before_install:
  - travis_retry wget https://www.stackage.org/stack/linux-x86_64
  - tar -xvf linux-x86_64
  - mv stack-*-linux-x86_64/stack stack
  - $STACK setup
  - $STACK install cabal-install

install:
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"

# Here starts the actual work to be performed for the package under test; any
# command which exits with a non-zero exit code causes the build to fail.
script:
 - $STACK sdist
 - export SRC=$($CABAL info . | awk '{print $2;exit}')
 - tar -xzf "dist/$SRC.tar.gz"
 - cd "$SRC"
 - travis_retry $STACK --resolver $STACK_RESOLVER setup
 - travis_retry $STACK --resolver $STACK_RESOLVER install --only-snapshot -j4 --verbosity info
 - $STACK --resolver $STACK_RESOLVER build
 - $STACK --resolver $STACK_RESOLVER haddock --no-haddock-deps
 - $STACK --resolver $STACK_RESOLVER test
